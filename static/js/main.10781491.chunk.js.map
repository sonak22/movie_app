{"version":3,"sources":["movie.js","App.js","registerServiceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenre","_ref3","genre","Movie","_ref","genres","synopsis","movie_MoviePoster","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_getMovies","_callee","movies","regenerator_default","wrap","_context","prev","next","_this","_callApi","sent","setState","console","log","stop","this","fetch","then","potato","json","data","catch","err","_renderMovies","movie","src_movie_0","title_english","large_cover_image","id","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.10781491.chunk.js","sourcesContent":["//import React, { Component } from 'react';\nimport React from 'react';\n//propTypes는 존재하지 않음. \nimport PropTypes from 'prop-types';\nimport LinesEllipsis from 'react-lines-ellipsis'\nimport './movie.css';\n\n//function은 render 필요없음\nfunction Movie ({title,poster,genres,synopsis}){\n    return (\n        <div className=\"Movie\">\n            <div className=\"Movie__Column\">\n                <MoviePoster poster={poster} alt={title}/>\n            </div>\n            <div className=\"Movie__Column\">\n                <h1>{title}</h1>\n                <div className=\"Movie__Genres\">\n                    {genres.map((genre , index) => <MovieGenre genre={genre} key={index} />)}\n                </div>\n                <div className=\"Movie__Synopsis\">\n                    <LinesEllipsis\n                        text={synopsis}\n                        maxLine='3'\n                        ellipsis='...'\n                        trimRight\n                        basedOn='letters'\n                    />   \n                </div>\n            </div>\n        </div>\n      )\n}\nconst MoviePoster =  ({poster,alt}) => {\n   return <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\"/> \n}\n// function MoviePoster({poster, alt}){\n//     return(\n//         <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\"/> \n//     )\n// }\n\nfunction MovieGenre({genre}){\n    return(\n        <span className=\"Movie__Genre\">{genre}</span>\n    )\n}\n\n//////propTypes////////\nMovie.propTypes = {\n    title : PropTypes.string.isRequired,\n    poster : PropTypes.string.isRequired, \n    genres : PropTypes.string.isRequired,\n    synopsis : PropTypes.string.isRequired\n}\nMoviePoster.propTypes = {\n    poster : PropTypes.string.isRequired,\n    alt : PropTypes.string.isRequired\n}\nMovieGenre.propTypes = {\n    genre : PropTypes.string.isRequired\n}\n\nexport default Movie;","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './movie';\n\n\nclass App extends Component {\n    // api 보내기 - 존재하기 - did \n    //  Render : componentWillMount() -> render() -> componentDidMount()\n    //  update:  componentWillReceiveProps() -> shouldComponentUpdate() == true -> componentWillUpdate() ->render() -> componentDidUpdate()\n\n    state= {};\n\n    //setState 하기 - state 안에 movies 만들기  \n    //이 안에서 fetch부터 시작해도 되지만, 너무 커지기 때문에 밖으로 빼준 것.\n    componentDidMount(){\n        this._getMovies();\n    }\n    //2번 : api불러오기 이후에, 비어있는 state를 업데이트 한다.\n    _getMovies = async () => {\n        //await 이후 value return이 끝난 뒤(성공적이란의미는아님) json.data.movies 데이터를 const movies에 담아준다.\n        //await는 async에서 가능하다.\n        const movies = await this._callApi();\n        this.setState({\n            // movies:movies\n            movies\n        });\n        //array 20개 ... [{id:12, title:blah, ...}]\n        console.log(movies);\n    };\n\n    //1번 : api 에서 정보 가져오기 // =>에는 return 뜻도 포함되어있다. 모던자바스크립트.\n    _callApi = () => {\n        return fetch(\"https://yts.am/api/v2/list_movies.json?sort_by=download_count\")\n        .then(potato => potato.json())\n        .then(json => json.data.movies)\n        .catch(err => console.log(err))\n    };\n    \n    //3번 : state에 맵핑 방식으로 무비 리스트를 넣어준다. \n    _renderMovies = () => {\n        const movies = this.state.movies.map(movie => {\n          return (\n              //Movie 컴포넌트에 정보를 전달위해, 이름을 붙이고 콘솔에서 확인한 정보를 넣는다. props !\n            <Movie\n              title={movie.title_english}\n              poster={movie.large_cover_image}\n              key={movie.id}\n              genres={movie.genres}\n              synopsis={movie.synopsis}\n            />\n          );\n        });\n        \n        return movies;\n      };\n\n    render() {\n        const { movies } = this.state;\n        return (\n            <div className={movies ? \"App\" : \"App--loading\"}>\n            {movies ? this._renderMovies() : \"Loading\"}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\n\n//reactdom 은 한개의 컴포넌트를 출력하고있다.\nReactDOM.render(<App />, document.getElementById('root'));\n//id=root는 index.html에..\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nregisterServiceWorker();\n"],"sourceRoot":""}